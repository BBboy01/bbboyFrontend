export default `<h1>主窗口类型</h1>
<ul>
<li>QMainWindow: 可以包含菜单栏、工具栏、状态栏和标题栏，是最常见的窗口形式</li>
<li>QDialog: 是对话窗口的基类。没有菜单栏、工具栏、状态栏</li>
<li>QWidget: 不确定窗口的用途时使用</li>
</ul>
<h2>窗口中的方法()</h2>
<p>继承QMainWindow</p>
<ul>
<li>self.setWindowTitle(‘设置窗口的标题’)</li>
<li>self.resize(width, height)  设置窗口的尺寸</li>
<li>self.status = self.statusBar().showMessage(‘消息的内容’, 存在的时间)</li>
<li>size = self.geometry()  获取窗口坐标系</li>
<li>self.setGemoetry(width, height, x, y)  设置窗口大小和位置</li>
</ul>
<p>全局</p>
<ul>
<li>app.setWindowIcon(QIcon(‘图标路径’))  设置窗口图标</li>
<li>QApplication().setWindowIcon(‘图标路径’)  设置应用程序图标</li>
<li>screen = QDesktopWidget().screenGeometry()  获取屏幕坐标系</li>
<li>screen.width()  screen.height()</li>
</ul>
<h1>控件</h1>
<h2>PushButton</h2>
<pre class="hljs"><code><ol><li><span class="line-num" data-line="1"></span>button = QPushButton(<span class="hljs-string">&#x27;按钮上要显示的文字/热键&#x27;</span>)</li><li><span class="line-num" data-line="2"></span>button.setText(<span class="hljs-string">&#x27;按钮上显示的文字&#x27;</span>)</li><li><span class="line-num" data-line="3"></span><span class="hljs-comment"># 将按钮设置为二值类</span></li><li><span class="line-num" data-line="4"></span>button.setCheckable(<span class="hljs-literal">True</span>)</li><li><span class="line-num" data-line="5"></span>button.toggle()</li><li><span class="line-num" data-line="6"></span></li><li><span class="line-num" data-line="7"></span><span class="hljs-comment"># 传参式绑定槽</span></li><li><span class="line-num" data-line="8"></span>button.clicked.connect(<span class="hljs-keyword">lambda</span>:self.which_button(button))</li><li><span class="line-num" data-line="9"></span></li><li><span class="line-num" data-line="10"></span><span class="hljs-comment"># 在文本前面显示图像</span></li><li><span class="line-num" data-line="11"></span>button2 = QPushButton(<span class="hljs-string">&#x27;图像按钮&#x27;</span>)</li><li><span class="line-num" data-line="12"></span>button2.setIcon(QIcon(QPixmap(<span class="hljs-string">&#x27;图像路径&#x27;</span>)))</li><li><span class="line-num" data-line="13"></span></li><li><span class="line-num" data-line="14"></span><span class="hljs-comment"># 设置按钮不可用</span></li><li><span class="line-num" data-line="15"></span>button3 = QPushButton(<span class="hljs-string">&#x27;不可用按钮&#x27;</span>)</li><li><span class="line-num" data-line="16"></span>button3.setEnable(<span class="hljs-literal">False</span>)</li><li><span class="line-num" data-line="17"></span></li><li><span class="line-num" data-line="18"></span><span class="hljs-comment"># 设置默认按钮</span></li><li><span class="line-num" data-line="19"></span>button4 = QPushButton(<span class="hljs-string">&#x27;&amp;MyButton&#x27;</span>)</li><li><span class="line-num" data-line="20"></span>button4.setDefault(<span class="hljs-literal">True</span>)</li><li><span class="line-num" data-line="21"></span></li><li><span class="line-num" data-line="22"></span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">which_button</span>(<span class="hljs-params">self, btn</span>):</span></li><li><span class="line-num" data-line="23"></span>    <span class="hljs-built_in">print</span>(btn.text())</li></ol><b class="name">python</b></code></pre>
<h2>RadioButton</h2>
<p>默认未选中</p>
<pre class="hljs"><code><ol><li><span class="line-num" data-line="1"></span>layout = QHBoxLayout()</li><li><span class="line-num" data-line="2"></span></li><li><span class="line-num" data-line="3"></span>radio_button = QRadioButton(<span class="hljs-string">&#x27;单选按钮1&#x27;</span>)</li><li><span class="line-num" data-line="4"></span><span class="hljs-comment"># 设置单选按钮默认是否被选中</span></li><li><span class="line-num" data-line="5"></span>radio_button.setChecked(<span class="hljs-literal">True</span>)</li><li><span class="line-num" data-line="6"></span>radio_button.toggled.connect(self.radio_status)</li><li><span class="line-num" data-line="7"></span>layout.addWidget(radio_button)</li><li><span class="line-num" data-line="8"></span></li><li><span class="line-num" data-line="9"></span>radio_button2 = QRadioButton(<span class="hljs-string">&#x27;单选按钮2&#x27;</span>)</li><li><span class="line-num" data-line="10"></span>radio_button2.toggled.connect(self.radio_status)</li><li><span class="line-num" data-line="11"></span>layout.addWidget(radio_button2)</li><li><span class="line-num" data-line="12"></span></li><li><span class="line-num" data-line="13"></span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">radio_status</span>(<span class="hljs-params">self</span>):</span></li><li><span class="line-num" data-line="14"></span>    radio_button = self.sender()</li><li><span class="line-num" data-line="15"></span>    <span class="hljs-keyword">if</span> radio_button.isChecked():</li><li><span class="line-num" data-line="16"></span>        <span class="hljs-built_in">print</span>(radio_button.text() + <span class="hljs-string">&#x27;被选中&#x27;</span>)</li><li><span class="line-num" data-line="17"></span>	<span class="hljs-keyword">else</span>:</li><li><span class="line-num" data-line="18"></span>		<span class="hljs-built_in">print</span>(radio_button.text() + <span class="hljs-string">&#x27;未被选中&#x27;</span>)</li></ol><b class="name">python</b></code></pre>
<h2>CheckBox</h2>
<p>3种状态：</p>
<ul>
<li>未选中(默认)：0</li>
<li>半选中：1</li>
<li>选中：2</li>
</ul>
<pre class="hljs"><code><ol><li><span class="line-num" data-line="1"></span>layout = QHBoxLayout</li><li><span class="line-num" data-line="2"></span></li><li><span class="line-num" data-line="3"></span>check_box = QCheckBox(<span class="hljs-string">&#x27;未选中复选框1&#x27;</span>)</li><li><span class="line-num" data-line="4"></span>check_box2 = QCheckBox(<span class="hljs-string">&#x27;选中复选框2&#x27;</span>)</li><li><span class="line-num" data-line="5"></span>check_box2.setChecked(<span class="hljs-literal">True</span>)</li><li><span class="line-num" data-line="6"></span>check_box3 = QCheckBox(<span class="hljs-string">&#x27;半选中复选框3&#x27;</span>)</li><li><span class="line-num" data-line="7"></span>check_box3.setTristate(<span class="hljs-literal">True</span>)</li><li><span class="line-num" data-line="8"></span>check_box3.setCheckState(Qt.PartiallyChecked)</li><li><span class="line-num" data-line="9"></span></li><li><span class="line-num" data-line="10"></span>layout.addWidget(check_box)</li><li><span class="line-num" data-line="11"></span>layout.addWidget(check_box2)</li><li><span class="line-num" data-line="12"></span>layout.addWidget(check_box3)</li></ol><b class="name">python</b></code></pre>
<h2>ComboBox</h2>
<p>下拉列表控件</p>
<pre class="hljs"><code><ol><li><span class="line-num" data-line="1"></span>layout = QVBoxLayout()</li><li><span class="line-num" data-line="2"></span></li><li><span class="line-num" data-line="3"></span>self.label = QLable(<span class="hljs-string">&#x27;请选择编程语言&#x27;</span>)</li><li><span class="line-num" data-line="4"></span></li><li><span class="line-num" data-line="5"></span>self.cb = QComboBox()</li><li><span class="line-num" data-line="6"></span>self.cb.addItem(<span class="hljs-string">&#x27;C++&#x27;</span>)</li><li><span class="line-num" data-line="7"></span>self.cb.addItem(<span class="hljs-string">&#x27;Python&#x27;</span>)</li><li><span class="line-num" data-line="8"></span>self.cb.addItem([<span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;C#&#x27;</span>])</li><li><span class="line-num" data-line="9"></span></li><li><span class="line-num" data-line="10"></span>self.cb.currentIndexChanged.connect(self.selection_change)</li><li><span class="line-num" data-line="11"></span></li><li><span class="line-num" data-line="12"></span>layout.addWidget(self.label)</li><li><span class="line-num" data-line="13"></span>layout.addWidget(self.cb)</li><li><span class="line-num" data-line="14"></span>self.setLayout(layout)</li><li><span class="line-num" data-line="15"></span></li><li><span class="line-num" data-line="16"></span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">selection_change</span>(<span class="hljs-params">self, i</span>):</span></li><li><span class="line-num" data-line="17"></span>    self.label.setText(self.cb.currentText())</li><li><span class="line-num" data-line="18"></span>    self.label.adjustSize()</li><li><span class="line-num" data-line="19"></span>    </li><li><span class="line-num" data-line="20"></span>    <span class="hljs-keyword">for</span> count <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.cb.count()):</li><li><span class="line-num" data-line="21"></span>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;item&#x27;</span> + <span class="hljs-built_in">str</span>(count) + <span class="hljs-string">&#x27;=&#x27;</span> + self.cb.itemText(count))</li><li><span class="line-num" data-line="22"></span>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;current index&#x27;</span>, i, <span class="hljs-string">&#x27;selection changed&#x27;</span>, self.cb.currentText())</li></ol><b class="name">python</b></code></pre>
<h2>Slider</h2>
<p>滑块控件</p>
<pre class="hljs"><code><ol><li><span class="line-num" data-line="1"></span>layout = QVBoxLayout()</li><li><span class="line-num" data-line="2"></span></li><li><span class="line-num" data-line="3"></span>self.label = QLable(<span class="hljs-string">&#x27;qt5&#x27;</span>)</li><li><span class="line-num" data-line="4"></span>self.label.setAlignment(Qt.AlignCenter)</li><li><span class="line-num" data-line="5"></span>layout.addWidget(self.label)</li><li><span class="line-num" data-line="6"></span></li><li><span class="line-num" data-line="7"></span><span class="hljs-comment"># 垂直的滑块</span></li><li><span class="line-num" data-line="8"></span>self.slider2 = QSlider(Qt.Vertical)</li><li><span class="line-num" data-line="9"></span><span class="hljs-comment"># 水平的滑块</span></li><li><span class="line-num" data-line="10"></span>self.slider = QSlider(Qt.Horizontal)</li><li><span class="line-num" data-line="11"></span><span class="hljs-comment"># 设置最小值</span></li><li><span class="line-num" data-line="12"></span>self.slider.setMinimum(<span class="hljs-number">12</span>)</li><li><span class="line-num" data-line="13"></span><span class="hljs-comment"># 设置最大值</span></li><li><span class="line-num" data-line="14"></span>self.slider.setMaximum(<span class="hljs-number">48</span>)</li><li><span class="line-num" data-line="15"></span><span class="hljs-comment"># 设置步长</span></li><li><span class="line-num" data-line="16"></span>self.slider.setSingleStep(<span class="hljs-number">3</span>)</li><li><span class="line-num" data-line="17"></span><span class="hljs-comment"># 设置当前值</span></li><li><span class="line-num" data-line="18"></span>self.silder.setValue(<span class="hljs-number">18</span>)</li><li><span class="line-num" data-line="19"></span><span class="hljs-comment"># 设置刻度的位置 下方</span></li><li><span class="line-num" data-line="20"></span>self.slider.setTickPosition(QSlider.TicksBelow)</li><li><span class="line-num" data-line="21"></span><span class="hljs-comment"># 设置刻度的间隔</span></li><li><span class="line-num" data-line="22"></span>self.slider.setTickInterval(<span class="hljs-number">6</span>)</li><li><span class="line-num" data-line="23"></span>layout.addWidget(self.slider)</li><li><span class="line-num" data-line="24"></span></li><li><span class="line-num" data-line="25"></span>self.slider.valueChanged.connect(self.value_change)</li><li><span class="line-num" data-line="26"></span></li><li><span class="line-num" data-line="27"></span>self.setLayout(layout)</li><li><span class="line-num" data-line="28"></span></li><li><span class="line-num" data-line="29"></span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">value_change</span>(<span class="hljs-params">self</span>):</span></li><li><span class="line-num" data-line="30"></span>    c_value = self.sender().value()</li><li><span class="line-num" data-line="31"></span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;当前值为：%s&#x27;</span> % c_value)</li><li><span class="line-num" data-line="32"></span>    self.label.setFont(QFont(<span class="hljs-string">&#x27;Arial&#x27;</span>, c_value))</li></ol><b class="name">python</b></code></pre>
<h2>Label</h2>
<p>setAlignment()  设置文本的对齐方式</p>
<p>setIndent()  设置文本缩进</p>
<p>text()  获取文本内容</p>
<p>setBuddy()  设置伙伴关系</p>
<p>setText()  设置文本内容，可根据html标签个性化设置</p>
<p>selectedText()  返回所选的字符</p>
<p>setWordWrap()  设置是否允许换行</p>
<p>常用的信号(事件)：</p>
<ul>
<li>linkHovered  鼠标滑过时触发</li>
<li>linkActivate  鼠标单击时触发</li>
</ul>
<pre class="hljs"><code><ol><li><span class="line-num" data-line="1"></span><span class="hljs-keyword">from</span> PyQt5.QtGui <span class="hljs-keyword">import</span> QPalette, QPixmap</li><li><span class="line-num" data-line="2"></span><span class="hljs-keyword">from</span> PyQt5.QtCore <span class="hljs-keyword">import</span> Qt</li><li><span class="line-num" data-line="3"></span></li><li><span class="line-num" data-line="4"></span>label1 = Qlabel()</li><li><span class="line-num" data-line="5"></span>label1.setText(<span class="hljs-string">&#x27;&lt;font color=yellow&gt;这是一个文本标签&lt;/font&gt;&#x27;</span>)</li><li><span class="line-num" data-line="6"></span>label1.setAutoFillBackground(<span class="hljs-literal">True</span>)</li><li><span class="line-num" data-line="7"></span><span class="hljs-comment"># 创建调色板</span></li><li><span class="line-num" data-line="8"></span>palette = QPalette()</li><li><span class="line-num" data-line="9"></span>palette.setColor(QPalette.Window, Qt.blue)</li><li><span class="line-num" data-line="10"></span><span class="hljs-comment"># 添加颜色</span></li><li><span class="line-num" data-line="11"></span>label1.setPalette(palette)</li><li><span class="line-num" data-line="12"></span><span class="hljs-comment"># 设置文本对齐方式</span></li><li><span class="line-num" data-line="13"></span>label1.setAlignment(Qt.AlignCenter)</li><li><span class="line-num" data-line="14"></span></li><li><span class="line-num" data-line="15"></span></li><li><span class="line-num" data-line="16"></span>label2 = Qlabel()</li><li><span class="line-num" data-line="17"></span><span class="hljs-comment"># 设置链接</span></li><li><span class="line-num" data-line="18"></span>label2.setOpenExternallinks(<span class="hljs-literal">True</span>)</li><li><span class="line-num" data-line="19"></span>label2.setText(<span class="hljs-string">&quot;&lt;a href=&#x27;https://bilibili.com&#x27;&gt;跳转到B站&lt;/a&gt;&quot;</span>)</li><li><span class="line-num" data-line="20"></span></li><li><span class="line-num" data-line="21"></span></li><li><span class="line-num" data-line="22"></span>label3 = Qlabel()</li><li><span class="line-num" data-line="23"></span>label3.setAlignment(Qt.AlignCenter)</li><li><span class="line-num" data-line="24"></span>label3.setToolTip(<span class="hljs-string">&#x27;这是Label3&#x27;</span>)</li><li><span class="line-num" data-line="25"></span><span class="hljs-comment"># 设置图片</span></li><li><span class="line-num" data-line="26"></span>label3.setPixmap(QPixmap(<span class="hljs-string">&#x27;图片路径&#x27;</span>))</li></ol><b class="name">python</b></code></pre>
<pre class="hljs"><code><ol><li><span class="line-num" data-line="1"></span><span class="hljs-keyword">import</span> sys</li><li><span class="line-num" data-line="2"></span><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> *</li><li><span class="line-num" data-line="3"></span></li><li><span class="line-num" data-line="4"></span><span class="hljs-string">&quot;&quot;&quot;</li><li><span class="line-num" data-line="5"></span>网格布局的参数</li><li><span class="line-num" data-line="6"></span>main_layout = QGridLayout(self).addWidget(控件对象, rowIndex, columnIndex, rowTakes, columnTakes)</li><li><span class="line-num" data-line="7"></span>&quot;&quot;&quot;</span></li><li><span class="line-num" data-line="8"></span></li><li><span class="line-num" data-line="9"></span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QLabelBuddy</span>(<span class="hljs-params">QDialog</span>):</span></li><li><span class="line-num" data-line="10"></span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span></li><li><span class="line-num" data-line="11"></span>        <span class="hljs-built_in">super</span>().__init__()</li><li><span class="line-num" data-line="12"></span>        self.init_ui()</li><li><span class="line-num" data-line="13"></span></li><li><span class="line-num" data-line="14"></span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">init_ui</span>(<span class="hljs-params">self</span>):</span></li><li><span class="line-num" data-line="15"></span>        self.setWindowTitle(<span class="hljs-string">&#x27;QLabel伙伴关系&#x27;</span>)</li><li><span class="line-num" data-line="16"></span></li><li><span class="line-num" data-line="17"></span>        <span class="hljs-comment"># 设置热键 ALT+N</span></li><li><span class="line-num" data-line="18"></span>        name_label = QLabel(<span class="hljs-string">&#x27;&amp;Name&#x27;</span>)</li><li><span class="line-num" data-line="19"></span>        name_line_edit = QLineEdit()</li><li><span class="line-num" data-line="20"></span>        <span class="hljs-comment"># 设置伙伴关系</span></li><li><span class="line-num" data-line="21"></span>        name_label.setBuddy(name_line_edit)</li><li><span class="line-num" data-line="22"></span></li><li><span class="line-num" data-line="23"></span>        pwd_label = QLabel(<span class="hljs-string">&#x27;&amp;Password&#x27;</span>)</li><li><span class="line-num" data-line="24"></span>        pwd_line_edit = QLineEdit()</li><li><span class="line-num" data-line="25"></span>        <span class="hljs-comment"># 设置伙伴关系</span></li><li><span class="line-num" data-line="26"></span>        pwd_label.setBuddy(pwd_line_edit)</li><li><span class="line-num" data-line="27"></span></li><li><span class="line-num" data-line="28"></span>        btn_ok = QPushButton(<span class="hljs-string">&#x27;&amp;OK&#x27;</span>)</li><li><span class="line-num" data-line="29"></span>        btn_cancel = QPushButton(<span class="hljs-string">&#x27;&amp;Cancel&#x27;</span>)</li><li><span class="line-num" data-line="30"></span></li><li><span class="line-num" data-line="31"></span>        main_layout = QGridLayout(self)</li><li><span class="line-num" data-line="32"></span>        main_layout.addWidget(name_label, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)</li><li><span class="line-num" data-line="33"></span>        main_layout.addWidget(name_line_edit, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</li><li><span class="line-num" data-line="34"></span></li><li><span class="line-num" data-line="35"></span>        main_layout.addWidget(pwd_label, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</li><li><span class="line-num" data-line="36"></span>        main_layout.addWidget(pwd_line_edit, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</li><li><span class="line-num" data-line="37"></span></li><li><span class="line-num" data-line="38"></span>        main_layout.addWidget(btn_ok, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)</li><li><span class="line-num" data-line="39"></span>        main_layout.addWidget(btn_cancel, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)</li><li><span class="line-num" data-line="40"></span></li><li><span class="line-num" data-line="41"></span></li><li><span class="line-num" data-line="42"></span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:</li><li><span class="line-num" data-line="43"></span>    app = QApplication(sys.argv)</li><li><span class="line-num" data-line="44"></span>    mainWindow = QLabelBuddy()</li><li><span class="line-num" data-line="45"></span>    mainWindow.show()</li><li><span class="line-num" data-line="46"></span>    sys.exit(app.exec_())</li></ol><b class="name">python</b></code></pre>
<h2>LineEdit</h2>
<p>4种回显模式</p>
<ul>
<li>Normal</li>
<li>NoEcho</li>
<li>Password</li>
<li>PasswordEchoOnEdit</li>
</ul>
<pre class="hljs"><code><ol><li><span class="line-num" data-line="1"></span><span class="hljs-comment"># 创建表单布局</span></li><li><span class="line-num" data-line="2"></span>form_layout = QFormLayout()</li><li><span class="line-num" data-line="3"></span></li><li><span class="line-num" data-line="4"></span>normal_line_edit = QLineEdit()</li><li><span class="line-num" data-line="5"></span>no_echo_line_edit = QLineEdit()</li><li><span class="line-num" data-line="6"></span>passowrd_line_edit = QLineEdit()</li><li><span class="line-num" data-line="7"></span>passowrd_echo_on_edit_line_edit = QLineEdit()</li><li><span class="line-num" data-line="8"></span></li><li><span class="line-num" data-line="9"></span>form_layout.addRow(<span class="hljs-string">&#x27;Normal&#x27;</span>, normal_line_edit)</li><li><span class="line-num" data-line="10"></span>form_layout.addRow(<span class="hljs-string">&#x27;NoEcho&#x27;</span>, no_echo_line_edit)</li><li><span class="line-num" data-line="11"></span>form_layout.addRow(<span class="hljs-string">&#x27;Password&#x27;</span>, passowrd_line_edit)</li><li><span class="line-num" data-line="12"></span>form_layout.addRow(<span class="hljs-string">&#x27;PasswordEchoOnEdit&#x27;</span>, passowrd_echo_on_edit_line_edit)</li><li><span class="line-num" data-line="13"></span></li><li><span class="line-num" data-line="14"></span><span class="hljs-comment"># 灰色提示 输入时消失</span></li><li><span class="line-num" data-line="15"></span>normal_line_edit.setPlaceholderText(<span class="hljs-string">&#x27;this one is normal&#x27;</span>)</li><li><span class="line-num" data-line="16"></span></li><li><span class="line-num" data-line="17"></span><span class="hljs-comment"># 设置回显模式</span></li><li><span class="line-num" data-line="18"></span>normal_line_edit.setEchoMode(QLineEdit.Normal)</li><li><span class="line-num" data-line="19"></span></li><li><span class="line-num" data-line="20"></span>self.setLayout(form_layout)</li></ol><b class="name">python</b></code></pre>
<p>用校验器限制LineEdit输入的类型</p>
<pre class="hljs"><code><ol><li><span class="line-num" data-line="1"></span><span class="hljs-keyword">from</span> PyQt5.QtGui <span class="hljs-keyword">import</span> QIntValidator, QDoubleValidator, QRegExpValidator</li><li><span class="line-num" data-line="2"></span><span class="hljs-keyword">from</span> PyQt5.QtCore <span class="hljs-keyword">import</span> QRegExp</li><li><span class="line-num" data-line="3"></span></li><li><span class="line-num" data-line="4"></span><span class="hljs-comment"># 创建表单布局</span></li><li><span class="line-num" data-line="5"></span>form_layout = QFormLayout()</li><li><span class="line-num" data-line="6"></span></li><li><span class="line-num" data-line="7"></span>int_line_edit = QLineEdit()</li><li><span class="line-num" data-line="8"></span>double_line_edit = QLineEdit()</li><li><span class="line-num" data-line="9"></span>regex_line_edit = QLineEdit()</li><li><span class="line-num" data-line="10"></span></li><li><span class="line-num" data-line="11"></span>form_layout.addRow(<span class="hljs-string">&#x27;整数类型&#x27;</span>, int_line_edit)</li><li><span class="line-num" data-line="12"></span>form_layout.addRow(<span class="hljs-string">&#x27;浮点数类型&#x27;</span>, double_line_edit)</li><li><span class="line-num" data-line="13"></span>form_layout.addRow(<span class="hljs-string">&#x27;正则&#x27;</span>, regex_line_edit)</li><li><span class="line-num" data-line="14"></span></li><li><span class="line-num" data-line="15"></span>int_line_edit.setPlaceholderText(<span class="hljs-string">&#x27;只能输入整数&#x27;</span>)</li><li><span class="line-num" data-line="16"></span>double_line_edit.setPlaceholderText(<span class="hljs-string">&#x27;只能输入浮点数&#x27;</span>)</li><li><span class="line-num" data-line="17"></span>regex_line_edit.setPlaceholderText(<span class="hljs-string">&#x27;只能输入符合正则的字符&#x27;</span>)</li><li><span class="line-num" data-line="18"></span></li><li><span class="line-num" data-line="19"></span><span class="hljs-comment"># 创建整型校验器 1~99</span></li><li><span class="line-num" data-line="20"></span>int_validator = QIntValidator(self)</li><li><span class="line-num" data-line="21"></span>int_validator.setRange(<span class="hljs-number">1</span>, <span class="hljs-number">99</span>)</li><li><span class="line-num" data-line="22"></span></li><li><span class="line-num" data-line="23"></span><span class="hljs-comment"># 创建浮点数校验器 -360~360</span></li><li><span class="line-num" data-line="24"></span>double_validator = QDoubleValidator(self)</li><li><span class="line-num" data-line="25"></span>double_validator.setRange(-<span class="hljs-number">360</span>, <span class="hljs-number">360</span>)</li><li><span class="line-num" data-line="26"></span>double_validator.setNotation(QDoubleValidator.StandardNotation)</li><li><span class="line-num" data-line="27"></span><span class="hljs-comment"># 设置精度 小数点后两位</span></li><li><span class="line-num" data-line="28"></span>double_validator.setDecimals(<span class="hljs-number">2</span>)</li><li><span class="line-num" data-line="29"></span></li><li><span class="line-num" data-line="30"></span><span class="hljs-comment"># 创建正则校验器 字符和数字</span></li><li><span class="line-num" data-line="31"></span>reg = QRegExp(<span class="hljs-string">&#x27;^[a-zA-Z0-9]+$&#x27;</span>)</li><li><span class="line-num" data-line="32"></span>reg_validator = QRegExpValidator(self)</li><li><span class="line-num" data-line="33"></span>reg_validator.setRegExp(reg)</li><li><span class="line-num" data-line="34"></span></li><li><span class="line-num" data-line="35"></span><span class="hljs-comment"># 设置校验器</span></li><li><span class="line-num" data-line="36"></span>int_line_edit.setValidator(int_validator)</li><li><span class="line-num" data-line="37"></span><span class="hljs-comment"># 设置最大长度</span></li><li><span class="line-num" data-line="38"></span>int_line_edit.setMaxLength(<span class="hljs-number">2</span>)</li><li><span class="line-num" data-line="39"></span><span class="hljs-comment"># 设置字体</span></li><li><span class="line-num" data-line="40"></span>int_line_edit.setFont(QFont(<span class="hljs-string">&#x27;Arial&#x27;</span>, <span class="hljs-number">20</span>))</li><li><span class="line-num" data-line="41"></span>double_line_edit.setValidator(double_validator)</li><li><span class="line-num" data-line="42"></span>regex_line_edit.setValidator(reg_validator)</li><li><span class="line-num" data-line="43"></span></li><li><span class="line-num" data-line="44"></span>self.setLayout(form_layout)</li></ol><b class="name">python</b></code></pre>
<p>用掩码限制LineEdit输入的类型（网上找）</p>
<h2>TextEdit</h2>
<pre class="hljs"><code><ol><li><span class="line-num" data-line="1"></span><span class="hljs-keyword">import</span> sys</li><li><span class="line-num" data-line="2"></span><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> *</li><li><span class="line-num" data-line="3"></span></li><li><span class="line-num" data-line="4"></span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TextEditDemo</span>(<span class="hljs-params">QWidget</span>):</span></li><li><span class="line-num" data-line="5"></span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span></li><li><span class="line-num" data-line="6"></span>        <span class="hljs-built_in">super</span>().__init__()</li><li><span class="line-num" data-line="7"></span>        self.init_ui()</li><li><span class="line-num" data-line="8"></span></li><li><span class="line-num" data-line="9"></span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">init_ui</span>(<span class="hljs-params">self</span>):</span></li><li><span class="line-num" data-line="10"></span>        self.setWindowTitle(<span class="hljs-string">&#x27;QTextEdit控件演示&#x27;</span>)</li><li><span class="line-num" data-line="11"></span></li><li><span class="line-num" data-line="12"></span>        self.setGeometry(<span class="hljs-number">300</span>, <span class="hljs-number">200</span>, <span class="hljs-number">500</span>, <span class="hljs-number">400</span>)</li><li><span class="line-num" data-line="13"></span></li><li><span class="line-num" data-line="14"></span>        self.text_edit = QTextEdit()</li><li><span class="line-num" data-line="15"></span>        self.button_text = QPushButton(<span class="hljs-string">&#x27;显示文本&#x27;</span>)</li><li><span class="line-num" data-line="16"></span>        self.button_html = QPushButton(<span class="hljs-string">&#x27;显示HTML&#x27;</span>)</li><li><span class="line-num" data-line="17"></span>        self.button_to_text = QPushButton(<span class="hljs-string">&#x27;转化为文本&#x27;</span>)</li><li><span class="line-num" data-line="18"></span>        self.button_to_html = QPushButton(<span class="hljs-string">&#x27;转化为HTML&#x27;</span>)</li><li><span class="line-num" data-line="19"></span></li><li><span class="line-num" data-line="20"></span>        layout = QVBoxLayout()</li><li><span class="line-num" data-line="21"></span></li><li><span class="line-num" data-line="22"></span>        layout.addWidget(self.text_edit)</li><li><span class="line-num" data-line="23"></span>        layout.addWidget(self.button_text)</li><li><span class="line-num" data-line="24"></span>        layout.addWidget(self.button_html)</li><li><span class="line-num" data-line="25"></span>        layout.addWidget(self.button_to_text)</li><li><span class="line-num" data-line="26"></span>        layout.addWidget(self.button_to_html)</li><li><span class="line-num" data-line="27"></span></li><li><span class="line-num" data-line="28"></span>        self.setLayout(layout)</li><li><span class="line-num" data-line="29"></span></li><li><span class="line-num" data-line="30"></span>        self.button_text.clicked.connect(self.on_click_text)</li><li><span class="line-num" data-line="31"></span>        self.button_html.clicked.connect(self.on_click_html)</li><li><span class="line-num" data-line="32"></span>        self.button_to_text.clicked.connect(self.on_click_to_text)</li><li><span class="line-num" data-line="33"></span>        self.button_to_html.clicked.connect(self.on_click_to_html)</li><li><span class="line-num" data-line="34"></span></li><li><span class="line-num" data-line="35"></span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">on_click_text</span>(<span class="hljs-params">self</span>):</span></li><li><span class="line-num" data-line="36"></span>        self.text_edit.setPlainText(<span class="hljs-string">&#x27;Hellow World&#x27;</span>)</li><li><span class="line-num" data-line="37"></span></li><li><span class="line-num" data-line="38"></span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">on_click_html</span>(<span class="hljs-params">self</span>):</span></li><li><span class="line-num" data-line="39"></span>        self.text_edit.setHtml(<span class="hljs-string">&#x27;&lt;font color=&quot;skyblue&quot;&gt; Hellow World aaa &lt;/font&gt;&#x27;</span>)</li><li><span class="line-num" data-line="40"></span></li><li><span class="line-num" data-line="41"></span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">on_click_to_text</span>(<span class="hljs-params">self</span>):</span></li><li><span class="line-num" data-line="42"></span>        self.text_edit.setPlainText(self.text_edit.toPlainText())</li><li><span class="line-num" data-line="43"></span></li><li><span class="line-num" data-line="44"></span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">on_click_to_html</span>(<span class="hljs-params">self</span>):</span></li><li><span class="line-num" data-line="45"></span>        self.text_edit.setHtml(<span class="hljs-string">&#x27;&lt;font color=&quot;red&quot;&gt;&#x27;</span> + self.text_edit.toHtml() + <span class="hljs-string">&quot;&lt;/font&gt;&quot;</span>)</li><li><span class="line-num" data-line="46"></span></li><li><span class="line-num" data-line="47"></span></li><li><span class="line-num" data-line="48"></span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:</li><li><span class="line-num" data-line="49"></span>    app = QApplication(sys.argv)</li><li><span class="line-num" data-line="50"></span>    mainWindow = TextEditDemo()</li><li><span class="line-num" data-line="51"></span>    mainWindow.show()</li><li><span class="line-num" data-line="52"></span>    sys.exit(app.exec_())</li></ol><b class="name">python</b></code></pre>
<h2>计数器控件</h2>
<pre class="hljs"><code><ol><li><span class="line-num" data-line="1"></span>layout = QVBoxLayout()</li><li><span class="line-num" data-line="2"></span></li><li><span class="line-num" data-line="3"></span>self.label = QLabel(<span class="hljs-string">&#x27;当前值&#x27;</span>)</li><li><span class="line-num" data-line="4"></span>self.label.setAlignment(Qt.AlignCenter)</li><li><span class="line-num" data-line="5"></span>layout.addWidget(self.label)</li><li><span class="line-num" data-line="6"></span></li><li><span class="line-num" data-line="7"></span>self.sb = QSpinBox()</li><li><span class="line-num" data-line="8"></span><span class="hljs-comment"># 设置范围</span></li><li><span class="line-num" data-line="9"></span>self.sb.setRange(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>)</li><li><span class="line-num" data-line="10"></span><span class="hljs-comment"># 设置步长</span></li><li><span class="line-num" data-line="11"></span>self.sb.setSingleStep(<span class="hljs-number">3</span>)</li><li><span class="line-num" data-line="12"></span>layout.addWidget(self.sb)</li><li><span class="line-num" data-line="13"></span></li><li><span class="line-num" data-line="14"></span>self.sb.valueChange.connect(self.value_change)</li><li><span class="line-num" data-line="15"></span></li><li><span class="line-num" data-line="16"></span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">value_change</span>(<span class="hljs-params">self</span>):</span></li><li><span class="line-num" data-line="17"></span>    self.label.setText(<span class="hljs-string">&#x27;当前值&#x27;</span> + <span class="hljs-built_in">str</span>(self.sb.value())</li></ol><b class="name">python</b></code></pre>
<h2>Dialog</h2>
<p>对话框</p>
<pre class="hljs"><code><ol><li><span class="line-num" data-line="1"></span>dialog = QDialog()</li><li><span class="line-num" data-line="2"></span>dialog.setWindowTitle(<span class="hljs-string">&#x27;对话框&#x27;</span>)</li><li><span class="line-num" data-line="3"></span><span class="hljs-comment"># 设置对话框为应用模式 即对话框弹出状态下无法操作母窗口</span></li><li><span class="line-num" data-line="4"></span>dialog.setWindowModality(Qt.ApplicationModal)</li></ol><b class="name">python</b></code></pre>
<h3>消息对话框</h3>
<p>类型：</p>
<ul>
<li>关于对话框 QMessageBox.about</li>
<li>错误对话框 QMessageBox.critical</li>
<li>警告对话框 QMessageBox.warning</li>
<li>提问对话框 QMessageBox.question</li>
<li>消息对话框 QMessageBox.information</li>
</ul>
<p>差异：</p>
<ul>
<li>显示的对话框的图标可能不相同</li>
<li>显示的按钮不一样</li>
</ul>
<pre class="hljs"><code><ol><li><span class="line-num" data-line="1"></span>layout = QVBoxLayout()</li><li><span class="line-num" data-line="2"></span></li><li><span class="line-num" data-line="3"></span>button1 = QPushButton()</li><li><span class="line-num" data-line="4"></span>button1.setText(<span class="hljs-string">&#x27;关于对话框&#x27;</span>)</li><li><span class="line-num" data-line="5"></span>button1.clicked.connect(self.show_dialog)</li><li><span class="line-num" data-line="6"></span></li><li><span class="line-num" data-line="7"></span>button2 = QPushButton()</li><li><span class="line-num" data-line="8"></span>button2.setText(<span class="hljs-string">&#x27;消息对话框&#x27;</span>)</li><li><span class="line-num" data-line="9"></span>button2.clicked.connect(self.show_dialog)</li><li><span class="line-num" data-line="10"></span></li><li><span class="line-num" data-line="11"></span>button3 = QPushButton()</li><li><span class="line-num" data-line="12"></span>button3.setText(<span class="hljs-string">&#x27;警告对话框&#x27;</span>)</li><li><span class="line-num" data-line="13"></span>button3.clicked.connect(self.show_dialog)</li><li><span class="line-num" data-line="14"></span></li><li><span class="line-num" data-line="15"></span>button4 = QPushButton()</li><li><span class="line-num" data-line="16"></span>button4.setText(<span class="hljs-string">&#x27;错误对话框&#x27;</span>)</li><li><span class="line-num" data-line="17"></span>button4.clicked.connect(self.show_dialog)</li><li><span class="line-num" data-line="18"></span></li><li><span class="line-num" data-line="19"></span>button5 = QPushButton()</li><li><span class="line-num" data-line="20"></span>button5.setText(<span class="hljs-string">&#x27;提问对话框&#x27;</span>)</li><li><span class="line-num" data-line="21"></span>button5.clicked.connect(self.show_dialog)</li><li><span class="line-num" data-line="22"></span></li><li><span class="line-num" data-line="23"></span>layout.addWidget(button1)</li><li><span class="line-num" data-line="24"></span>layout.addWidget(button2)</li><li><span class="line-num" data-line="25"></span>layout.addWidget(button3)</li><li><span class="line-num" data-line="26"></span>layout.addWidget(button4)</li><li><span class="line-num" data-line="27"></span>layout.addWidget(button5)</li><li><span class="line-num" data-line="28"></span>self.setLayout(layout)</li><li><span class="line-num" data-line="29"></span></li><li><span class="line-num" data-line="30"></span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_dialog</span>(<span class="hljs-params">self</span>):</span></li><li><span class="line-num" data-line="31"></span>    text = self.sender().text()</li><li><span class="line-num" data-line="32"></span>    <span class="hljs-keyword">if</span> text == <span class="hljs-string">&#x27;关于对话框&#x27;</span>:</li><li><span class="line-num" data-line="33"></span>        QMessageBox.about(self, <span class="hljs-string">&#x27;对话框标题上的文字&#x27;</span>, <span class="hljs-string">&#x27;对话框上显示的文字&#x27;</span>)</li><li><span class="line-num" data-line="34"></span>     <span class="hljs-keyword">elif</span> text == <span class="hljs-string">&#x27;消息对话框&#x27;</span>:</li><li><span class="line-num" data-line="35"></span>        reply = QMessageBox.information(self, <span class="hljs-string">&#x27;对话框标题上的文字&#x27;</span>, <span class="hljs-string">&#x27;对话框上显示的文字&#x27;</span>, QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)</li><li><span class="line-num" data-line="36"></span>        <span class="hljs-built_in">print</span>(reply == QMessageBox.Yes)</li><li><span class="line-num" data-line="37"></span>	<span class="hljs-keyword">elif</span> text == <span class="hljs-string">&#x27;警告对话框&#x27;</span>:</li><li><span class="line-num" data-line="38"></span>        QMessageBox.warning(self, <span class="hljs-string">&#x27;对话框标题上的文字&#x27;</span>, <span class="hljs-string">&#x27;对话框上显示的文字&#x27;</span>, QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)</li><li><span class="line-num" data-line="39"></span>	<span class="hljs-keyword">elif</span> text == <span class="hljs-string">&#x27;错误对话框&#x27;</span>:</li><li><span class="line-num" data-line="40"></span>        QMessageBox.critical(self, <span class="hljs-string">&#x27;对话框标题上的文字&#x27;</span>, <span class="hljs-string">&#x27;对话框上显示的文字&#x27;</span>, QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)</li><li><span class="line-num" data-line="41"></span>	<span class="hljs-keyword">elif</span> text == <span class="hljs-string">&#x27;提问对话框&#x27;</span>:</li><li><span class="line-num" data-line="42"></span>        QMessageBox.question(self, <span class="hljs-string">&#x27;对话框标题上的文字&#x27;</span>, <span class="hljs-string">&#x27;对话框上显示的文字&#x27;</span>, QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)</li></ol><b class="name">python</b></code></pre>
<h3>输入对话框</h3>
<ul>
<li>QInputDialog.getItem</li>
<li>QInputDialog.getText</li>
<li>QInputDialog.getInt</li>
</ul>
<pre class="hljs"><code><ol><li><span class="line-num" data-line="1"></span>layout = QFormLayout()</li><li><span class="line-num" data-line="2"></span></li><li><span class="line-num" data-line="3"></span>button1 = QPushButton(<span class="hljs-string">&#x27;获取列表种的选项&#x27;</span>)</li><li><span class="line-num" data-line="4"></span>button1.clicked.connect(self.get_item)</li><li><span class="line-num" data-line="5"></span>self.line_edit1 = QLineEdit()</li><li><span class="line-num" data-line="6"></span></li><li><span class="line-num" data-line="7"></span>button2 = QPushButton(<span class="hljs-string">&#x27;获取字符串&#x27;</span>)</li><li><span class="line-num" data-line="8"></span>button2.clicked.connect(self.get_text)</li><li><span class="line-num" data-line="9"></span>self.line_edit2 = QLineEdit()</li><li><span class="line-num" data-line="10"></span></li><li><span class="line-num" data-line="11"></span>button3 = QPushButton(<span class="hljs-string">&#x27;获取整数&#x27;</span>)</li><li><span class="line-num" data-line="12"></span>button3.clicked.connect(self.get_int)</li><li><span class="line-num" data-line="13"></span>self.line_edit3 = QLineEdit()</li><li><span class="line-num" data-line="14"></span></li><li><span class="line-num" data-line="15"></span>layout.addRow(button1, self.line_edit1)</li><li><span class="line-num" data-line="16"></span>layout.addRow(button2, self.line_edit2)</li><li><span class="line-num" data-line="17"></span>layout.addRow(button3, self.line_edit3)</li><li><span class="line-num" data-line="18"></span></li><li><span class="line-num" data-line="19"></span>self.setLayout(layout)</li><li><span class="line-num" data-line="20"></span></li><li><span class="line-num" data-line="21"></span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_item</span>(<span class="hljs-params">self</span>):</span></li><li><span class="line-num" data-line="22"></span>    items = (<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;C++&#x27;</span>, <span class="hljs-string">&#x27;Ruby&#x27;</span>, <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;Java&#x27;</span>)</li><li><span class="line-num" data-line="23"></span>    item, ok = QInputDialog.getItem(self, <span class="hljs-string">&#x27;请选择编程语言&#x27;</span>, <span class="hljs-string">&#x27;语言列表&#x27;</span>, items)</li><li><span class="line-num" data-line="24"></span>    <span class="hljs-keyword">if</span> ok <span class="hljs-keyword">and</span> item:</li><li><span class="line-num" data-line="25"></span>        self.line_edit1.setText(item)</li><li><span class="line-num" data-line="26"></span>        </li><li><span class="line-num" data-line="27"></span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_text</span>(<span class="hljs-params">self</span>):</span></li><li><span class="line-num" data-line="28"></span>    text, ok = QInputDialog.getText(self, <span class="hljs-string">&#x27;文本输入框&#x27;</span>, <span class="hljs-string">&#x27;输入姓名&#x27;</span>)</li><li><span class="line-num" data-line="29"></span>    <span class="hljs-keyword">if</span> ok <span class="hljs-keyword">and</span> text:</li><li><span class="line-num" data-line="30"></span>        self.line_edit2.setText(text)</li><li><span class="line-num" data-line="31"></span></li><li><span class="line-num" data-line="32"></span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_int</span>(<span class="hljs-params">self</span>):</span></li><li><span class="line-num" data-line="33"></span>    num, ok = QInputDialog.getText(self, <span class="hljs-string">&#x27;整数输入框&#x27;</span>, <span class="hljs-string">&#x27;输入数字&#x27;</span>)</li><li><span class="line-num" data-line="34"></span>    <span class="hljs-keyword">if</span> ok <span class="hljs-keyword">and</span> num:</li><li><span class="line-num" data-line="35"></span>        self.line_edit3.setText(<span class="hljs-built_in">str</span>(num))</li></ol><b class="name">python</b></code></pre>
<h3>字体对话框</h3>
<p>QFontDialog.getFont()</p>
<pre class="hljs"><code><ol><li><span class="line-num" data-line="1"></span>layout = QVBoxLayout()</li><li><span class="line-num" data-line="2"></span></li><li><span class="line-num" data-line="3"></span>font_button = QPushButton(<span class="hljs-string">&#x27;选择字体&#x27;</span>)</li><li><span class="line-num" data-line="4"></span>font_button.clicked.connect(self.get_font)</li><li><span class="line-num" data-line="5"></span></li><li><span class="line-num" data-line="6"></span>self.font_label = QLabel(<span class="hljs-string">&#x27;测试字体&#x27;</span>)</li><li><span class="line-num" data-line="7"></span>layout.addWidget(font_button)</li><li><span class="line-num" data-line="8"></span>layout.addWidget(self.font_label)</li><li><span class="line-num" data-line="9"></span></li><li><span class="line-num" data-line="10"></span>self.setLayout(layout)</li><li><span class="line-num" data-line="11"></span></li><li><span class="line-num" data-line="12"></span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_font</span>(<span class="hljs-params">self</span>):</span></li><li><span class="line-num" data-line="13"></span>    font, ok = QFontDialog.getFont()</li><li><span class="line-num" data-line="14"></span>    <span class="hljs-keyword">if</span> ok:</li><li><span class="line-num" data-line="15"></span>        self.font_label.setFont(font)</li></ol><b class="name">python</b></code></pre>
<h3>颜色对话框</h3>
<p>QColorDialog.getColor()</p>
<pre class="hljs"><code><ol><li><span class="line-num" data-line="1"></span>layout = QVBoxLayout()</li><li><span class="line-num" data-line="2"></span></li><li><span class="line-num" data-line="3"></span>color_button = QPushButton(<span class="hljs-string">&#x27;选择文字颜色&#x27;</span>)</li><li><span class="line-num" data-line="4"></span>color_button.clicked.connect(self.get_color)</li><li><span class="line-num" data-line="5"></span></li><li><span class="line-num" data-line="6"></span>color_button1 = QPushButton(<span class="hljs-string">&#x27;选择背景颜色&#x27;</span>)</li><li><span class="line-num" data-line="7"></span>color_button1.clicked.connect(self.get_bg_color)</li><li><span class="line-num" data-line="8"></span></li><li><span class="line-num" data-line="9"></span>self.color_label = QLabel(<span class="hljs-string">&#x27;测试颜色&#x27;</span>)</li><li><span class="line-num" data-line="10"></span>layout.addWidget(color_button)</li><li><span class="line-num" data-line="11"></span>layout.addWidget(self.color_label)</li><li><span class="line-num" data-line="12"></span></li><li><span class="line-num" data-line="13"></span>self.setLayout(layout)</li><li><span class="line-num" data-line="14"></span></li><li><span class="line-num" data-line="15"></span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_color</span>(<span class="hljs-params">self</span>):</span></li><li><span class="line-num" data-line="16"></span>    color, ok = QColorDialog.getColor()</li><li><span class="line-num" data-line="17"></span>    p = QPalette()</li><li><span class="line-num" data-line="18"></span>    p.setColor(QPalette.WindowText, color)</li><li><span class="line-num" data-line="19"></span>    self.color_label.setPalette(p)</li><li><span class="line-num" data-line="20"></span></li><li><span class="line-num" data-line="21"></span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_bg_color</span>(<span class="hljs-params">self</span>):</span></li><li><span class="line-num" data-line="22"></span>    color, ok = QColorDialog.getColor()</li><li><span class="line-num" data-line="23"></span>    p = QPalette()</li><li><span class="line-num" data-line="24"></span>    p.setColor(QPalette.Window, color)</li><li><span class="line-num" data-line="25"></span>    self.color_label.setAutoFillBackground(<span class="hljs-literal">True</span>)</li><li><span class="line-num" data-line="26"></span>    self.color_label.setPalette(p)</li></ol><b class="name">python</b></code></pre>
<h3>文件对话框</h3>
<p>QFileDialog</p>
<pre class="hljs"><code><ol><li><span class="line-num" data-line="1"></span>layout = QVBoxLayout()</li><li><span class="line-num" data-line="2"></span></li><li><span class="line-num" data-line="3"></span>button = QPushButton(<span class="hljs-string">&#x27;加载图片&#x27;</span>)</li><li><span class="line-num" data-line="4"></span>button.clicked.connect(self.load_image)</li><li><span class="line-num" data-line="5"></span>self.img_label = QLabel()</li><li><span class="line-num" data-line="6"></span>layout.addWidget(button)</li><li><span class="line-num" data-line="7"></span>layout.addWidget(self.img_label)</li><li><span class="line-num" data-line="8"></span></li><li><span class="line-num" data-line="9"></span>button1 = QPushButton(<span class="hljs-string">&#x27;加载文本文件&#x27;</span>)</li><li><span class="line-num" data-line="10"></span>button1.clicked.connect(self.load_text)</li><li><span class="line-num" data-line="11"></span>layout.addWidget(button1)</li><li><span class="line-num" data-line="12"></span></li><li><span class="line-num" data-line="13"></span>self.contents = QTextEdit()</li><li><span class="line-num" data-line="14"></span>layout.addWidget(self.contents)</li><li><span class="line-num" data-line="15"></span></li><li><span class="line-num" data-line="16"></span>self.setLayout(layout)</li><li><span class="line-num" data-line="17"></span></li><li><span class="line-num" data-line="18"></span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_img</span>(<span class="hljs-params">self</span>):</span></li><li><span class="line-num" data-line="19"></span>    fname, _ = QFileDialog.getOpenFileName(self, <span class="hljs-string">&#x27;打开文件&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;图像文件(*.jpg *.png)&#x27;</span>)</li><li><span class="line-num" data-line="20"></span>    self.img_label.setPixmap(QPixmap(fname))</li><li><span class="line-num" data-line="21"></span>    </li><li><span class="line-num" data-line="22"></span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_text</span>(<span class="hljs-params">self</span>):</span></li><li><span class="line-num" data-line="23"></span>    dialog = QFileDialog()</li><li><span class="line-num" data-line="24"></span>    dialog.setFileMode(QFileDialog.AnyFile)</li><li><span class="line-num" data-line="25"></span>    dialog.setFilter(QDir.Files)</li><li><span class="line-num" data-line="26"></span>    </li><li><span class="line-num" data-line="27"></span>    <span class="hljs-keyword">if</span> dialog.<span class="hljs-built_in">exec</span>():</li><li><span class="line-num" data-line="28"></span>        filenames = dialog.selectedFiles()</li><li><span class="line-num" data-line="29"></span>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filenames[<span class="hljs-number">0</span>], <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:</li><li><span class="line-num" data-line="30"></span>            data = f.read()</li><li><span class="line-num" data-line="31"></span>            self.contents.setText(data)</li></ol><b class="name">python</b></code></pre>
<h1>信号槽</h1>
<pre class="hljs"><code><ol><li><span class="line-num" data-line="1"></span><span class="hljs-keyword">import</span> sys</li><li><span class="line-num" data-line="2"></span><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QApplication, QMainWindow, QPushButton, QHBoxLayout, QWidget</li><li><span class="line-num" data-line="3"></span></li><li><span class="line-num" data-line="4"></span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QuitApplication</span>(<span class="hljs-params">QMainWindow</span>):</span></li><li><span class="line-num" data-line="5"></span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span></li><li><span class="line-num" data-line="6"></span>        <span class="hljs-built_in">super</span>().__init__()</li><li><span class="line-num" data-line="7"></span>        self.resize(<span class="hljs-number">300</span>, <span class="hljs-number">200</span>)</li><li><span class="line-num" data-line="8"></span>        self.setWindowTitle(<span class="hljs-string">&#x27;点击按钮退出程序&#x27;</span>)</li><li><span class="line-num" data-line="9"></span></li><li><span class="line-num" data-line="10"></span>        <span class="hljs-comment"># 添加按钮</span></li><li><span class="line-num" data-line="11"></span>        button1 = QPushButton(<span class="hljs-string">&#x27;退出&#x27;</span>)</li><li><span class="line-num" data-line="12"></span>        <span class="hljs-comment"># 绑定方法</span></li><li><span class="line-num" data-line="13"></span>        button1.clicked.connect(self.on_click)</li><li><span class="line-num" data-line="14"></span></li><li><span class="line-num" data-line="15"></span>        <span class="hljs-comment"># 设置水平布局</span></li><li><span class="line-num" data-line="16"></span>        layout = QHBoxLayout()</li><li><span class="line-num" data-line="17"></span>        layout.addWidget(button1)</li><li><span class="line-num" data-line="18"></span></li><li><span class="line-num" data-line="19"></span>        main_frame = QWidget()</li><li><span class="line-num" data-line="20"></span>        main_frame.setLayout(layout)</li><li><span class="line-num" data-line="21"></span></li><li><span class="line-num" data-line="22"></span>        self.setCentralWidget(main_frame)</li><li><span class="line-num" data-line="23"></span></li><li><span class="line-num" data-line="24"></span>    <span class="hljs-comment"># 自定义的槽</span></li><li><span class="line-num" data-line="25"></span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">on_click</span>(<span class="hljs-params">self</span>):</span></li><li><span class="line-num" data-line="26"></span>        sender = self.sender()</li><li><span class="line-num" data-line="27"></span>        <span class="hljs-built_in">print</span>(sender.text())</li><li><span class="line-num" data-line="28"></span>        app = QApplication.instance()</li><li><span class="line-num" data-line="29"></span>        app.quit()</li><li><span class="line-num" data-line="30"></span></li><li><span class="line-num" data-line="31"></span></li><li><span class="line-num" data-line="32"></span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:</li><li><span class="line-num" data-line="33"></span>    app = QApplication(sys.argv)</li><li><span class="line-num" data-line="34"></span>    mainWindow = QuitApplication()</li><li><span class="line-num" data-line="35"></span>    mainWindow.show()</li><li><span class="line-num" data-line="36"></span>    sys.exit(app.exec_())</li></ol><b class="name">python</b></code></pre>
<h1>控件提示信息</h1>
<pre class="hljs"><code><ol><li><span class="line-num" data-line="1"></span>button1 = QPushButton(<span class="hljs-string">&#x27;退出&#x27;</span>)</li><li><span class="line-num" data-line="2"></span>button1.setToolTip(<span class="hljs-string">&#x27;别看了这是提示信息&#x27;</span>)</li></ol><b class="name">python</b></code></pre>
<h1>屏幕坐标系</h1>
<pre class="hljs"><code><ol><li><span class="line-num" data-line="1"></span>widget = QWidget()</li><li><span class="line-num" data-line="2"></span></li><li><span class="line-num" data-line="3"></span>widget.x()  <span class="hljs-comment"># 窗口横坐标</span></li><li><span class="line-num" data-line="4"></span>widget.y()  <span class="hljs-comment"># 窗口纵坐标</span></li><li><span class="line-num" data-line="5"></span>widget.width()  <span class="hljs-comment"># 工作区宽度</span></li><li><span class="line-num" data-line="6"></span>widget.height()  <span class="hljs-comment"># 工作区高度</span></li><li><span class="line-num" data-line="7"></span></li><li><span class="line-num" data-line="8"></span>widget.gemoetry().x()  <span class="hljs-comment"># 工作区横坐标</span></li><li><span class="line-num" data-line="9"></span>widget.gemoetry().y()  <span class="hljs-comment"># 工作区纵坐标</span></li><li><span class="line-num" data-line="10"></span>widget.gemoetry().width()  <span class="hljs-comment"># 工作区宽度</span></li><li><span class="line-num" data-line="11"></span>widget.gemoetry().height()  <span class="hljs-comment"># 工作区高度</span></li><li><span class="line-num" data-line="12"></span></li><li><span class="line-num" data-line="13"></span>widget.frameGemoetry().x()  <span class="hljs-comment"># 窗口横坐标</span></li><li><span class="line-num" data-line="14"></span>widget.frameGemoetry().y()  <span class="hljs-comment"># 窗口纵坐标</span></li><li><span class="line-num" data-line="15"></span>widget.frameGemoetry().width()  <span class="hljs-comment"># 窗口宽度</span></li><li><span class="line-num" data-line="16"></span>widget.frameGemoetry().height()  <span class="hljs-comment"># 窗口高度</span></li></ol><b class="name">python</b></code></pre>
`;
